import{V as c,W as n}from"./index-DXhrB1zA.js";const u=["objectId","createdAt","updatedAt"],w=t=>t?t.toLocaleDateString("zh-CN").replace(/\//g,"-"):null,b=t=>t?typeof t=="string"?new Date(t):new Date(t):null,g={async reinitializeTable(){return await c("training_members"),{success:!0,message:"数据表结构已更新"}},async getAllMembers(){await c("training_members");const e=(await new n.Query("training_members").find()).map(r=>r.toJSON()),o=new Date;for(const r of e)if(r.stage==="未新训"){const a=new Date(r.joinTime),l=Math.floor((o.getTime()-a.getTime())/(1e3*60*60*24)),i=l>3?"未训退队":"催促参训";if(l>3&&r.status!=="未训退队"){await this.updateMember(r.objectId,{...r,status:i});try{const m=new n.Query("quit_members");m.equalTo("memberId",r.objectId),(await m.find()).length===0&&await R.addQuitRecord({memberId:r.objectId,memberName:r.nickname,memberQQ:r.qq,quitDate:w(o),reason:"未参训",type:"未训退队"})}catch(m){console.error("Failed to add quit record:",m)}r.status=i}}return e},async getMember(t){return await c("training_members"),(await new n.Query("training_members").get(t)).toJSON()},async addMember(t){await c("training_members");const s=n.Object.extend("training_members"),e=new s,o=b(t.joinDate),r=t.lastTrainingDate?b(t.lastTrainingDate):null,a={...t,joinDate:w(o),lastTrainingDate:r?w(r):null,status:t.stage==="未新训"?"催促参训":"正常"};return u.forEach(i=>delete a[i]),Object.keys(a).forEach(i=>{e.set(i,a[i])}),(await e.save()).toJSON()},async updateMember(t,s){try{await c("training_members");const e=n.Object.createWithoutData("training_members",t);return"joinTime"in s&&e.set("joinTime",String(s.joinTime)),"lastTrainingDate"in s&&e.set("lastTrainingDate",String(s.lastTrainingDate)),"nickname"in s&&e.set("nickname",String(s.nickname)),"qq"in s&&e.set("qq",String(s.qq)),"gameId"in s&&e.set("gameId",String(s.gameId)),"stage"in s&&e.set("stage",String(s.stage)),"status"in s&&e.set("status",String(s.status)),"passDate"in s&&e.set("passDate",String(s.passDate)),"leaveRequest"in s&&e.set("leaveRequest",String(s.leaveRequest)),console.log("准备保存的数据:",e.toJSON()),(await e.save()).toJSON()}catch(e){throw console.error("更新成员失败:",e),e}},async deleteMember(t){await c("training_members");try{await n.Object.createWithoutData("training_members",t).destroy();const e=new n.Query("leave_records");e.equalTo("memberId",t);const o=await e.find();for(const d of o)await d.destroy();const r=new n.Query("ended_leaves");r.equalTo("memberId",t);const a=await r.find();for(const d of a)await d.destroy();const l=new n.Query("blacklist_records");l.equalTo("memberId",t);const i=await l.find();for(const d of i)await d.destroy();const m=new n.Query("blacklist_remove_records");m.equalTo("memberId",t);const y=await m.find();for(const d of y)await d.destroy();const f=new n.Query("assessments");f.equalTo("memberId",t);const q=await f.find();for(const d of q)await d.destroy();const v=new n.Query("quit_members");v.equalTo("memberId",t);const h=await v.find();for(const d of h)await d.destroy();const _=new n.Query("blacklist_quit_members");_.equalTo("memberId",t);const O=await _.find();for(const d of O)await d.destroy()}catch(s){throw console.error("Failed to delete member and related records:",s),s}}},Q={async getAllLeaveRecords(){await c("leave_records");const t=new n.Query("leave_records");t.descending("createdAt");const e=(await t.find()).map(a=>a.toJSON()),r=w(new Date);if(!r)return e;for(const a of e)if(a.status==="请假中"){const l=new Date(a.endDate),i=new Date(r);l<i&&(await this.updateLeaveRecord(a.objectId,{...a,status:"等待销假"}),a.status="等待销假")}return e},async getLeaveRecord(t){return await c("leave_records"),(await new n.Query("leave_records").get(t)).toJSON()},async addLeaveRecord(t){await c("leave_records");const s=n.Object.extend("leave_records"),e=new s,o=b(t.startDate),r=b(t.endDate),a={...t,startDate:w(o),endDate:w(r),status:"请假中"};return u.forEach(i=>delete a[i]),Object.keys(a).forEach(i=>{e.set(i,a[i])}),(await e.save()).toJSON()},async updateLeaveRecord(t,s){await c("leave_records");const e=n.Object.createWithoutData("leave_records",t),o={...s};return u.forEach(a=>delete o[a]),Object.keys(o).forEach(a=>{e.set(a,o[a])}),(await e.save()).toJSON()},async endLeave(t,s){try{const e=await this.getLeaveRecord(t),r=w(new Date);if(!r)throw new Error("Invalid date");await this.updateLeaveRecord(t,{...e,status:"已销假",endedDate:r}),await this.addEndedLeaveRecord({memberId:e.memberId,memberName:e.memberName,memberQQ:e.memberQQ,startDate:e.startDate,endDate:e.endDate,endedDate:r,status:"已销假",reason:e.reason});const a=await g.getMember(e.memberId);a&&await g.updateMember(e.memberId,{...a,lastTrainingDate:r})}catch(e){throw console.error("Failed to end leave:",e),e}},async getEndedLeaveRecords(){try{return await c("ended_leaves"),(await new n.Query("ended_leaves").find()).map(e=>({objectId:e.id,...e.toJSON()}))}catch(t){throw console.error("Failed to get ended leave records:",t),t}},async addEndedLeaveRecord(t){try{await c("ended_leaves");const s=n.Object.extend("ended_leaves"),e=new s,o={...t};u.forEach(a=>delete o[a]),Object.keys(o).forEach(a=>{e.set(a,o[a])});const r=await e.save();return{objectId:r.id,...r.toJSON()}}catch(s){throw console.error("Failed to add ended leave record:",s),s}},async deleteEndedLeaveRecord(t){try{await c("ended_leaves"),await n.Object.createWithoutData("ended_leaves",t).destroy()}catch(s){throw console.error("Failed to delete ended leave record:",s),s}},async deleteLeaveRecord(t){try{await c("leave_records"),await n.Object.createWithoutData("leave_records",t).destroy()}catch(s){throw console.error("Failed to delete leave record:",s),s}}},S={async getAllBlacklistRecords(){return await c("blacklist_records"),(await new n.Query("blacklist_records").find()).map(e=>e.toJSON())},async getAllBlacklistRemoveRecords(){return await c("blacklist_remove_records"),(await new n.Query("blacklist_remove_records").find()).map(e=>e.toJSON())},async addBlacklistRecord(t){await c("blacklist_records");const s=n.Object.extend("blacklist_records"),e=new s;return Object.keys(t).forEach(r=>{e.set(r,t[r])}),(await e.save()).toJSON()},async addBlacklistRemoveRecord(t){await c("blacklist_remove_records");const s=n.Object.extend("blacklist_remove_records"),e=new s;return Object.keys(t).forEach(r=>{e.set(r,t[r])}),(await e.save()).toJSON()},async updateBlacklistRecord(t,s){await c("blacklist_records");const e=n.Object.createWithoutData("blacklist_records",t);return Object.keys(s).forEach(r=>{e.set(r,s[r])}),(await e.save()).toJSON()},async deleteBlacklistRecord(t){await c("blacklist_records"),await n.Object.createWithoutData("blacklist_records",t).destroy()}},R={async getAllQuitRecords(){return await c("quit_members"),(await new n.Query("quit_members").find()).map(e=>e.toJSON())},async addQuitRecord(t){await c("quit_members");const s=new n.Query("quit_members");s.equalTo("memberId",t.memberId);const e=await s.first(),o={...t,quitType:t.quitType||t.type||"未知"};if(u.forEach(r=>delete o[r]),e)return Object.keys(o).forEach(a=>{e.set(a,o[a])}),(await e.save()).toJSON();{const r=n.Object.extend("quit_members"),a=new r;return Object.keys(o).forEach(i=>{a.set(i,o[i])}),(await a.save()).toJSON()}},async deleteQuitRecord(t){await c("quit_members"),await n.Object.createWithoutData("quit_members",t).destroy()},async updateQuitRecord(t,s){await c("quit_members");const e=n.Object.createWithoutData("quit_members",t),o={...s};return u.forEach(a=>delete o[a]),Object.keys(o).forEach(a=>{e.set(a,o[a])}),(await e.save()).toJSON()}},k={async getAllBlacklistQuitRecords(){return await c("blacklist_quit_members"),(await new n.Query("blacklist_quit_members").find()).map(e=>e.toJSON())},async addBlacklistQuitRecord(t){await c("blacklist_quit_members");const s=n.Object.extend("blacklist_quit_members"),e=new s,o={...t};return u.forEach(a=>delete o[a]),Object.keys(o).forEach(a=>{e.set(a,o[a])}),(await e.save()).toJSON()}},E={async getAllAssessments(){return await c("assessments"),(await new n.Query("assessments").find()).map(e=>e.toJSON())},async addAssessment(t){await c("assessments");const s=n.Object.extend("assessments"),e=new s,o={...t};return u.forEach(a=>delete o[a]),Object.keys(o).forEach(a=>{e.set(a,o[a])}),(await e.save()).toJSON()},async updateAssessment(t,s){await c("assessments");const e=n.Object.createWithoutData("assessments",t),o={...s};return u.forEach(a=>delete o[a]),Object.keys(o).forEach(a=>{e.set(a,o[a])}),(await e.save()).toJSON()},async deleteAssessment(t){await c("assessments"),await n.Object.createWithoutData("assessments",t).destroy()}};export{E as A,S as B,Q as L,g as M,R as Q,k as a};
